<?php
/**
 * @copyright Incsub (http://incsub.com/)
 *
 * @license http://opensource.org/licenses/GPL-2.0 GNU General Public License, version 2 (GPL-2.0)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License, version 2, as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301 USA
 *
*/

/**
 * Base class for all import handlers.
 *
 * @since 1.1.0
 * @package Membership
 * @subpackage Model
 */
class MS_Model_Import extends MS_Model {

	/**
	 * The sanitized import source object. The value of this property is set by
	 * the prepare() function.
	 *
	 * @since 1.1.0
	 *
	 * @var array
	 */
	public $source = array();

	/**
	 * This function parses the Import source (e.g. an file-upload or settings
	 * of another plugin) and returns true in case the source data is valid.
	 * When returning true then the  $source property of the model is set to
	 * the sanitized import source data.
	 *
	 * Logic has to be implemented by child classes.
	 *
	 * @since  1.1.0
	 *
	 * @return bool
	 */
	public function prepare() {
		throw new Exception( 'Method to be implemented in child class' );
	}

	/**
	 * Checks if the provided data is a recognized import object.
	 * If not an import object then FALSE will be returned, otherwise the
	 * object itself.
	 *
	 * @since  1.1.0
	 * @param  object $data Import object to test.
	 * @return object|false
	 */
	protected function validate_object( $data ) {
		$data = apply_filters( 'ms_import_validate_object_before', $data );

		if ( empty( $data )
			|| ! is_object( $data )
			|| ! isset( $data->source )
			|| ! isset( $data->plugin_version )
			|| ! isset( $data->export_time )
			|| ! isset( $data->protected_content )
			|| ! isset( $data->memberships )
			|| ! isset( $data->members )
			|| ! isset( $data->settings )
		) {
			return false;
		} else {
			return apply_filters( 'ms_import_validate_object', $data );
		}
	}

	/**
	 * Import data that was previously generated by the preview_object()
	 * function.
	 */
	public function import_data( $data, $args ) {
		$data = $this->validate_object( $data );

		if ( empty( $data ) ) {
			WDev()->message(
				__( 'Import-data could not be parsed. Please try again.', MS_TEXT_DOMAIN ),
				'err'
			);
			return false;
		}

		if ( $args['clear_all'] ) {
			WDev()->message( '1. Clear all' );
		}

		// First create Memberships
		foreach ( $data->memberships as $obj ) {
			$membership = MS_Factory::create( 'MS_Model_Membership' );
			$this->populate_membership( $membership, $obj );
			#WDev()->debug( $membership );
			$membership->save();

			if ( ! empty( $obj->children ) ) {
				foreach ( $obj->children as $child_obj ) {
					$child = $membership->create_child( 'import_item' );
					$this->populate_membership( $child, $child_obj );
					#WDev()->debug( $child );
					$child->save();
				}
			}
		}
	}

	protected function populate_membership( &$membership, $obj ) {
		$membership->name = $obj->name;
		$membership->description = $obj->description;
		$membership->type = $obj->type;
		$membership->active = (bool) $obj->active;
		$membership->private = (bool) $obj->private;
		$membership->is_free = (bool) $obj->free;
		$membership->dripped_type = $obj->dripped;

		if ( isset( $obj->pay_type ) ) {
			$membership->payment_type = $obj->pay_type;
		}
		if ( isset( $obj->price ) ) {
			$membership->price = $obj->price;
		}
		if ( isset( $obj->trial ) ) {
			$membership->trial_period_enabled = (bool) $obj->trial;
		}
		if ( isset( $obj->period ) ) {
			$membership->period = $obj->period;
		}
		if ( isset( $obj->period_start ) ) {
			$membership->period_date_start = $obj->period_start;
		}
		if ( isset( $obj->period_end ) ) {
			$membership->period_date_end = $obj->period_end;
		}
		if ( isset( $obj->period_cycle ) ) {
			$membership->pay_cycle_period = (array) $obj->period_cycle;
		}
		if ( isset( $obj->trial_price ) ) {
			$membership->trial_price = $obj->trial_price;
		}
		if ( isset( $obj->trial_period ) ) {
			$membership->trial_period = (array) $obj->trial_period;
		}
	}

}
