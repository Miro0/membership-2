<?php
/**
 * @copyright Incsub (http://incsub.com/)
 *
 * @license http://opensource.org/licenses/GPL-2.0 GNU General Public License, version 2 (GPL-2.0)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License, version 2, as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
 * MA 02110-1301 USA
 *
*/

/**
 * Stripe Gateway Integration for repeated payments (payment plans).
 *
 * Persisted by parent class MS_Model_Option. Singleton.
 *
 * @since 2.0.0
 * @package Membership2
 * @subpackage Model
 */
class MS_Gateway_Stripeplan extends MS_Gateway {

	const ID = 'stripeplan';

	/**
	 * Gateway singleton instance.
	 *
	 * @since 2.0.0
	 * @var string $instance
	 */
	public static $instance;

	/**
	 * Gateway group
	 *
	 * @since 2.0.0
	 * @var string
	 */
	protected $group = 'Stripe';

	/**
	 * Gateway ID.
	 *
	 * @since 2.0.0
	 * @var int $id
	 */
	protected $id = self::ID;

	/**
	 * Gateway name.
	 *
	 * @since 2.0.0
	 * @var string $name
	 */
	protected $name = '';

	/**
	 * Gateway description.
	 *
	 * @since 2.0.0
	 * @var string $description
	 */
	protected $description = '';

	/**
	 * Gateway active status.
	 *
	 * @since 2.0.0
	 * @var string $active
	 */
	protected $active = false;

	/**
	 * Manual payment indicator.
	 *
	 * If the gateway does not allow automatic reccuring billing.
	 *
	 * @since 2.0.0
	 * @var bool $manual_payment
	 */
	protected $manual_payment = false;

	/**
	 * Gateway allow Pro rating.
	 *
	 * @todo To be released in further versions.
	 * @since 2.0.0
	 * @var bool $pro_rate
	 */
	protected $pro_rate = true;

	/**
	 * Gateway operation mode.
	 *
	 * Live or sandbox (test) mode.
	 *
	 * @since 2.0.0
	 * @var string $mode
	 */
	protected $mode;

	/**
	 * Reference to the default Stripe gateway (we reuse existing functions here)
	 *
	 * @since 2.0.0
	 * @var MS_Gateway_Stripe $stripe
	 */
	protected $stripe;


	/**
	 * Initialize the object.
	 *
	 * @since 2.0.0
	 */
	public function after_load() {
		parent::after_load();
		$this->stripe = MS_Factory::load( 'MS_Gateway_Stripe' );

		$this->name = __( 'Stripe Subscriptions Gateway', MS_TEXT_DOMAIN );
	}

	/**
	 * Processes purchase action.
	 *
	 * @since 2.0.0
	 * @param MS_Model_Relationship $subscription The related membership relationship.
	 */
	public function process_purchase( $subscription ) {
		return $this->stripe->process_purchase( $subscription );
	}

	/**
	 * Request automatic payment to the gateway.
	 *
	 * @since 1.0.0
	 * @param MS_Model_Relationship $subscription The related membership relationship.
	 * @return bool True on success.
	 */
	public function request_payment( $subscription ) {
		return $this->stripe->request_payment( $subscription );
	}

	/**
	 * Add card info to strip customer profile.
	 *
	 * @since 1.0.0
	 * @api
	 *
	 * @param MS_Model_Member $member The member.
	 * @param string $token The stripe card token generated by the gateway.
	 */
	public function add_card( $member, $token ) {
		return $this->stripe->add_card( $member, $token );
	}

	/**
	 * Load Stripe lib.
	 *
	 * @since 1.0.0
	 * @internal
	 */
	protected function load_stripe_lib() {
		return $this->stripe->load_stripe_lib();
	}

	/**
	 * Get Stripe publishable key.
	 *
	 * @since 1.0.0
	 * @return string The Stripe API publishable key.
	 */
	public function get_publishable_key() {
		$publishable_key = null;

		if ( self::MODE_LIVE == $this->mode ) {
			$publishable_key = $this->stripe->publishable_key;
		} else {
			$publishable_key = $this->stripe->test_publishable_key;
		}

		return apply_filters(
			'ms_gateway_stripeplan_get_publishable_key',
			$publishable_key
		);
	}

	/**
	 * Get Stripe secret key.
	 *
	 * @since 1.0.0
	 * @return string The Stripe API secret key.
	 */
	protected function get_secret_key() {
		$secret_key = null;

		if ( self::MODE_LIVE == $this->mode ) {
			$secret_key = $this->stripe->secret_key;
		} else {
			$secret_key = $this->stripe->test_secret_key;
		}

		return apply_filters(
			'ms_gateway_stripeplan_get_secret_key',
			$secret_key
		);
	}

	/**
	 * Verify required fields.
	 *
	 * @since 1.0.0
	 * @return boolean True if configured.
	 */
	public function is_configured() {
		$key_pub = $this->get_publishable_key();
		$key_sec = $this->get_secret_key();

		$is_configured = ! ( empty( $key_pub ) || empty( $key_sec ) );

		return apply_filters(
			'ms_gateway_stripeplan_is_configured',
			$is_configured
		);
	}

}
